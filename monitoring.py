import threading
import time
from telegram_bot import send_message
from api import fetch_api
from patterns import check_patterns  # Importa a fun√ß√£o de padr√µes

# Defini√ß√µes de vari√°veis globais
analise_sinal = False
entrada = 0
max_gale = 2
check_resultado = []
win_count = 0
loss_count = 0
running = False
cor_sinal = None

def reset():
    global analise_sinal, entrada
    entrada = 0
    analise_sinal = False

def martingale():
    global entrada
    entrada += 1
    if entrada <= max_gale:
        send_message(f"‚ö†Ô∏è Gale {entrada} ‚ö†Ô∏è")
    else:
        loss()
        reset()

def win():
    global win_count
    send_message("‚úÖ")
    win_count += 1

def loss():
    global loss_count
    send_message("‚ùå")
    loss_count += 1

def enviar_sinal(cor, padrao):
    send_message(f'''
üö® Sinal encontrado üö®

‚èØÔ∏è Padr√£o: {padrao}

üí∂ Entrar no {cor}

ü¶æ Proteger no ‚ö™Ô∏è

üêì 2 martingale: (opcional)''')

def correcao(results, color):
    if results[0:1] == ['P'] and color == '‚ö´Ô∏è':
        win()
        reset()
    elif results[0:1] == ['V'] and color == 'üõë':
        win()
        reset()
    elif results[0:1] == ['P'] and color == 'üõë':
        martingale()
    elif results[0:1] == ['V'] and color == '‚ö´Ô∏è':
        martingale()
    elif results[0:1] == ['B']:
        win()
        reset()

def start_monitoring():
    global running
    running = True
    send_message("Sistema iniciado! Prepare-se para os sinais.")
    while running:
        try:
            resultado = fetch_api()
            if resultado != check_resultado:
                check_resultado[:] = resultado
                estrategia(resultado)
        except Exception as e:
            send_message(f"Erro ao buscar dados: {e}")
        time.sleep(5)

def estrategia(resultado):
    global analise_sinal, cor_sinal

    cores = []  # Inicializa a lista de cores
    for x in resultado:
        if x >= 1 and x <= 7:
            color = 'V'  # Verde
        elif x >= 8 and x <= 14:
            color = 'P'  # Preto
        else:
            color = 'B'  # Branco
        cores.append(color)

    # Exibe apenas as cores
    print(f"Cores geradas: {cores}")  # Exibe as cores geradas no console

    # Chama a fun√ß√£o de verifica√ß√£o de padr√µes
    analise_sinal, cor_sinal = check_patterns(cores, enviar_sinal, correcao, analise_sinal, cor_sinal)

def stop_monitoring():
    global running
    running = False
    send_message(f"üèÅ Encerramento da Sess√£o üèÅ\n\n‚úÖ Wins: {win_count}\n‚ùå Losses: {loss_count}\n\nObrigado por usar nosso servi√ßo! At√© a pr√≥xima sess√£o.")
    print(f"Relat√≥rio:\nWins: {win_count}\nLosses: {loss_count}")

# Para iniciar a monitoriza√ß√£o, use o seguinte c√≥digo:
if __name__ == "__main__":
    monitoring_thread = threading.Thread(target=start_monitoring)
    monitoring_thread.start()
